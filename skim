#!/usr/bin/env python

"""
The master skim launcher and tester
"""

from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('--test', action='store_true', default=False)
parser.add_argument('skim', help='skim name', nargs='?', default=None)
args = parser.parse_args()

from subprocess import call
from configobj import ConfigObj, flatten_errors
from validate import Validator
import sys
import os


TEST_CMD = """\
grid-batch --dataset %(dataset)s --metadata datasets.cfg 
--student %(student)s %(testinput)s
"""

SUBMIT_CMD = """\
grid-submit -u group.phys-higgs -m datasets.cfg -s %(student)s -v %(version)s
%(dataset)s
--official --voms=atlas:/atlas/phys-higgs/Role=production %(options)s
"""

configspec = 'skims.spec'
if not os.path.isfile(configspec):
    sys.exit('%s does not exist' % configspec)
metadata = ConfigObj('skims.cfg', configspec=configspec)
validator = Validator()
result = metadata.validate(validator, preserve_errors=True)
if result != True:
    for entry in flatten_errors(metadata, result):
        # each entry is a tuple
        section_list, key, error = entry
        if key is not None:
            section_list.append(key)
        else:
            section_list.append('[missing section]')
        section_string = ', '.join(section_list)
        if error == False:
            error = 'Missing value or section.'
        print section_string, ' = ', error
    sys.exit(1)

if args.skim is None:
    for skim, info in metadata.items():
        print "%s (version %d)" % (skim, info['version'])
    sys.exit(0)

skim = metadata[args.skim]
dataset = skim['dataset']
student = skim['student']
testinput = skim['testinput']
version = skim['version']
options = skim['options']

if args.test:
    cmd = TEST_CMD % locals()
else:
    cmd = SUBMIT_CMD % locals()

cmd = cmd.replace('\n', ' ')

print "executing:"
print
print cmd
print
if raw_input("Is this OK? Y/[n] ") == 'Y':
    call(cmd, shell=True)
