#!/usr/bin/env python

from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('--student', default='LHProcessorCN.py')
parser.add_argument('--systematics', default=None)
parser.add_argument('--nproc', type=int, default=5)
parser.add_argument('--queue', default='short')
parser.add_argument('--output-path', default='/cluster/data05/michel/Ntuples/lephad/2012-8')
parser.add_argument('--db', default='datasets_lh')
parser.add_argument('--nice', type=int, default=10)
parser.add_argument('--nominal-only', action='store_true', default=False)
parser.add_argument('--systematics-only', action='store_true', default=False)
parser.add_argument('--dry', action='store_true', default=False)
parser.add_argument('--use-ssh', dest='use_qsub', action='store_false', default=True)
parser.add_argument('samples', nargs='?', default=None)

args = parser.parse_args()

import sys
import cluster
from higgstautau import samples

hosts = cluster.get_hosts('hosts.sfu.txt')
setup = cluster.get_setup('setup.michel.sfu.txt')

datasets2012 = [
    'SingleTopSChanWenu',
    'SingleTopSChanWmunu',
    'SingleTopSChanWtaunu',
    'SingleTopWtChanIncl',
    'TVBF_ATau_ZtautauNp2',
    'TVBF_ATau_ZtautauNp3',
    'TVBF_ATau_ZtautauNp4',
    'TVBF_ATau_ZtautauNp5',
    'TVBF_ZeeNp2',
    'TVBF_ZeeNp3',
    'TVBF_ZeeNp4',
    'TVBF_ZeeNp5',
    'TVBF_ZmumuNp2',
    'TVBF_ZmumuNp3',
    'TVBF_ZmumuNp4',
    'TVBF_ZmumuNp5',
    'VBFH100',
    'VBFH105',
    'VBFH110',
    'VBFH115',
    'VBFH120',
    'VBFH125',
    'VBFH130',
    'VBFH135',
    'VBFH140',
    'VBFH145',
    'VBFH150',
    'VBF_ATau_ZtautauNp2',
    'VBF_ATau_ZtautauNp3',
    'VBF_ATau_ZtautauNp4',
    'VBF_ATau_ZtautauNp5',
    'VBF_WenuNp3',
    'VBF_WenuNp4',
    'VBF_WenuNp5',
    'VBF_WmunuNp3',
    'VBF_WmunuNp4',
    'VBF_WmunuNp5',
    'VBF_WtaunuNp3',
    'VBF_WtaunuNp4',
    'VBF_WtaunuNp5',
    'VBF_ZeeNp2',
    'VBF_ZeeNp3',
    'VBF_ZeeNp4',
    'VBF_ZeeNp5',
    'VBF_ZmumuNp2',
    'VBF_ZmumuNp3',
    'VBF_ZmumuNp4',
    'VBF_ZmumuNp5',
    'WH100',
    'WH105',
    'WH110',
    'WH115',
    'WH120',
    'WH125',
    'WH130',
    'WH135',
    'WH140',
    'WH145',
    'WH150',
    'WWlnulnuNp0',
    'WWlnulnuNp1',
    'WWlnulnuNp2',
    'WWlnulnuNp3',
    'WWqqlnuNp0',
    'WWqqlnuNp1',
    'WWqqlnuNp2',
    'WWqqlnuNp3',
    'WZ',
    'WenuNp0_AP',
    'WenuNp1_AP',
    'WenuNp2_AP',
    'WenuNp3_AP',
    'WenuNp4_AP',
    'WenuNp5_AP',
    'WmunuNp0_AP',
    'WmunuNp1_AP',
    'WmunuNp2_AP',
    'WmunuNp3_AP',
    'WmunuNp4_AP',
    'WmunuNp5_AP',
    'WtaunuNp0_AP',
    'WtaunuNp1_AP',
    'WtaunuNp2_AP',
    'WtaunuNp3_AP',
    'WtaunuNp4_AP',
    'WtaunuNp5_AP',
    'ZH100',
    'ZH105',
    'ZH110',
    'ZH115',
    'ZH120',
    'ZH125',
    'ZH130',
    'ZH135',
    'ZH140',
    'ZH145',
    'ZH150',
    'ZZ',
    'ZeeNp0Excl_Mll10to60',
    'ZeeNp0_AP',
    'ZeeNp1Excl_Mll10to60',
    'ZeeNp1_AP',
    'ZeeNp2Excl_Mll10to60',
    'ZeeNp2_AP',
    'ZeeNp3Excl_Mll10to60',
    'ZeeNp3_AP',
    'ZeeNp4Excl_Mll10to60',
    'ZeeNp4_AP',
    'ZeeNp5_AP',
    'ZmumuNp0Excl_Mll10to60',
    'ZmumuNp0_AP',
    'ZmumuNp1Excl_Mll10to60',
    'ZmumuNp1_AP',
    'ZmumuNp2Excl_Mll10to60',
    'ZmumuNp2_AP',
    'ZmumuNp3Excl_Mll10to60',
    'ZmumuNp3_AP',
    'ZmumuNp4Excl_Mll10to60',
    'ZmumuNp4_AP',
    'ZmumuNp5_AP',
    'ZtautauNp0Excl_Mll10to60',
    'ZtautauNp0_AP',
    'ZtautauNp1Excl_Mll10to60',
    'ZtautauNp1_AP',
    'ZtautauNp2Excl_Mll10to60',
    'ZtautauNp2_AP',
    'ZtautauNp3Excl_Mll10to60',
    'ZtautauNp3_AP',
    'ZtautauNp4Excl_Mll10to60',
    'ZtautauNp4_AP',
    'ZtautauNp5_AP',
    'ggH100',
    'ggH105',
    'ggH110',
    'ggH115',
    'ggH120',
    'ggH125',
    'ggH130',
    'ggH135',
    'ggH140',
    'ggH145',
    'ggH150',
    'singletop_tchan_e',
    'singletop_tchan_mu',
    'singletop_tchan_tau',
    'ttbar',
    'ttbar_allhad',
    'ZtommEWK_min_n_tchannels',
    'ZtottEWK_min_n_tchannels',
    'ZtoeeEWK_min_n_tchannels',
    ]

# datasets2012 = [
#     'embed12-LH-IM',
#     'embed12-LH-UP',
#     'embed12-LH-DN',
# ]

# datasets2012 = [
#     'data12-PhysCont-periodA.Egamma',
#     'data12-PhysCont-periodA.JetTauEtmiss',
#     'data12-PhysCont-periodA.Muons',
#     'data12-PhysCont-periodB.Egamma',
#     'data12-PhysCont-periodB.JetTauEtmiss',
#     'data12-PhysCont-periodB.Muons',
#     'data12-PhysCont-periodC.Egamma',
#     'data12-PhysCont-periodC.JetTauEtmiss',
#     'data12-PhysCont-periodC.Muons',
#     'data12-PhysCont-periodD.Egamma',
#     'data12-PhysCont-periodD.JetTauEtmiss',
#     'data12-PhysCont-periodD.Muons',
#     'data12-PhysCont-periodE.Egamma',
#     'data12-PhysCont-periodE.JetTauEtmiss',
#     'data12-PhysCont-periodE.Muons',
#     'data12-PhysCont-periodG.Egamma',
#     'data12-PhysCont-periodG.JetTauEtmiss',
#     'data12-PhysCont-periodG.Muons',
#     'data12-PhysCont-periodH.Egamma',
#     'data12-PhysCont-periodH.JetTauEtmiss',
#     'data12-PhysCont-periodH.Muons',
#     'data12-PhysCont-periodI.Egamma',
#     'data12-PhysCont-periodI.JetTauEtmiss',
#     'data12-PhysCont-periodI.Muons',
#     'data12-PhysCont-periodJ.Egamma',
#     'data12-PhysCont-periodJ.JetTauEtmiss',
#     'data12-PhysCont-periodJ.Muons',
#     'data12-PhysCont-periodL.Egamma',
#     'data12-PhysCont-periodL.JetTauEtmiss',
#     'data12-PhysCont-periodL.Muons',
#     ]

datasets = datasets2012

if not args.systematics_only:
    # nominal values
    cluster.run(args.student,
                db=args.db,
                datasets=datasets,
                hosts=hosts,
                nproc=args.nproc,
                nice=args.nice,
                setup=setup,
                output_path=args.output_path,
                use_qsub=args.use_qsub,
                qsub_queue=args.queue,
                dry_run=args.dry)

if not args.nominal_only:
    if args.systematics is not None:
        args.systematics = [
                set(s.upper().split('+')) for s in
                args.systematics.split(',')]
    # systematics
    cluster.run_systematics('LEPHAD',
                args.student,
                db=args.db,
                systematics=args.systematics,
                datasets=datasets,
                hosts=hosts,
                nproc=args.nproc,
                nice=args.nice,
                setup=setup,
                output_path=args.output_path,
                use_qsub=args.use_qsub,
                qsub_queue=args.queue,
                dry_run=args.dry)
